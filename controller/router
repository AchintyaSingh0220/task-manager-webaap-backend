const express = require("express");
const Route = express.Router();
const mongoose = require("mongoose");
const taskSchema = require("../model/taskSchema");
const userSchema = require("../model/userSchema");

// Get all users
Route.get("/all-users", (req, res) => {
    userSchema.find()
        .then((data) => res.json(data))
        .catch((err) => console.log(err));
});
// Get user with specific userId
Route.get("/users/:userId", (req, res) => {
    userSchema.findOne({ userId: req.params.userId })
        .then((data) => res.json(data))
        .catch((err) => console.log(err));
});

// Add a new user
Route.post("/add-user", (req, res) => {
    userSchema.create(req.body)
        .then((data) => res.json(data))
        .catch((err) => console.log(err));
});


// Delete a user and all their tasks
Route.delete("/delete-user/:userId", (req, res) => {
    const userId = req.params.userId;

    // Delete the user from the "users" collection
    userSchema.findOneAndDelete({ userId: userId })
        .then((user) => {
            if (!user) {
                return res.status(404).json({ message: "User not found" });
            }
            
            // Define a function to delete tasks by ID
            const deleteTaskById = (taskId) => {
                taskSchema.findByIdAndDelete(taskId)
                    .then(data => console.log("Task deleted"))
                    .catch(err => console.log(err));
            };

            // Find all tasks with the same userId
            taskSchema.find({ userId: userId })
                .then((tasks) => {
                    tasks.forEach(task => {
                        deleteTaskById(task._id);
                    });
                    res.json({ message: "User and associated tasks deleted successfully" });
                })
                .catch((err) => {
                    console.log(err);
                    res.status(500).json({ message: "Error deleting user's tasks" });
                });
        })
        .catch((err) => {
            console.log(err);
            res.status(500).json({ message: "Error deleting user" });
        });
});

// Get all tasks
Route.get("/all-tasks", (req, res) => {
    taskSchema.find()
        .then((data) => res.json(data))
        .catch((err) => console.log(err));
});

// Get all tasks for certain user
Route.get("/tasks/:userId", (req, res) => {
    taskSchema.find( {userId: req.params.userId} ).sort( {marked : 1, priority : -1} )
        .then((data) => res.json(data))
        .catch((err) => console.log(err));
});

// Returns list of tasks pending today
Route.get("/due-tasks/:userId", (req, res) => {
    const currentDate = () => {
        let yourDate = new Date();
        return yourDate.toISOString().split('T')[0];
    };
    taskSchema.find( {userId: req.params.userId, date: currentDate(), marked: false} )
    .then((data) => res.json(data))
    .catch((err) => console.log(err));
});

// Add a new task
Route.post("/add-task", (req, res) => {
    taskSchema.create(req.body)
        .then((data) => res.json(data))
        .catch((err) => console.log(err));
});

// Get a task by ID and update it
Route.route("/update-task/:id")
    .get((req, res) => {
        taskSchema.findById(req.params.id)
            .then((data) => res.json(data))
            .catch((err) => console.log(err));
    })
    .put((req, res) => {
        taskSchema.findByIdAndUpdate(req.params.id, { $set: req.body })
            .then((data) => res.json(data))
            .catch((err) => console.log(err));
    });

// Delete a task by ID
Route.delete("/delete-task/:id", (req, res) => {
    taskSchema.findByIdAndDelete(req.params.id)
        .then(data => res.send(data))
        .catch(err => console.log(err));
});

module.exports = Route;